{"version":3,"sources":["components/header.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","list","width","fullList","SwipeableTemporaryDrawer","side","classes","React","useState","top","left","bottom","right","state","setState","toggleDrawer","open","event","type","key","className","root","CssBaseline","AppBar","style","backgroundColor","boxShadow","position","Toolbar","Typography","noWrap","title","flexGrow","IconButton","opacity","color","aria-label","edge","onClick","anchor","onClose","onOpen","role","onKeyDown","List","map","text","ListItem","button","ListItemText","primary","inAnimations","Random","Math","floor","random","length","App","id","y","height","href","activeClass","to","spy","smooth","offset","duration","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6ZAaMA,EAAYC,YAAW,CACzBC,KAAM,CACFC,MAAO,OAEXC,SAAU,CACND,MAAO,UAIA,SAASE,IACpB,IAiBiBC,EAjBXC,EAAUP,IAD+B,EAErBQ,IAAMC,SAAS,CACrCC,KAAK,EACLC,MAAM,EACNC,QAAQ,EACRC,OAAO,IANoC,mBAExCC,EAFwC,KAEjCC,EAFiC,KASzCC,EAAe,SAACV,EAAMW,GAAP,OAAgB,SAAAC,KAC7BA,GAAwB,YAAfA,EAAMC,MAAqC,QAAdD,EAAME,KAA+B,UAAdF,EAAME,MAIvEL,EAAS,eAAKD,EAAN,eAAcR,EAAOW,OAuBjC,OACI,yBAAKI,UAAWd,EAAQe,MACpB,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CACIC,MAAO,CAAEC,gBAAiB,cAAeC,UAAW,QACpDC,SAAS,SAGT,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAM,EAACV,UAAWd,EAAQyB,QAGtC,yBAAKX,UAAU,WAAWI,MAAO,CAAEQ,SAAU,KAC7C,kBAACC,EAAA,EAAD,CACIT,MAAO,CAAEU,QAAS,GAClBC,MAAM,UACNC,aAAW,cACXC,KAAK,MACLC,QAASvB,EAAa,SAAS,IAE/B,kBAAC,IAAD,SAIZ,kBAAC,IAAD,CACIwB,OAAO,QACPvB,KAAMH,EAAMD,MACZ4B,QAASzB,EAAa,SAAS,GAC/B0B,OAAQ1B,EAAa,SAAS,KA/CzBV,EAiDK,QAhDlB,yBACIe,UAAWd,EAAQL,KACnByC,KAAK,eACLJ,QAASvB,EAAaV,GAAM,GAE5BsC,UAAW5B,EAAaV,GAAM,IAE9B,kBAACuC,EAAA,EAAD,KACK,CAAC,OAAQ,WAAY,WAAWC,KAAI,SAACC,GAAD,OACjC,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAAC7B,IAAK2B,GAClB,kBAACG,EAAA,EAAD,CAAcC,QAASJ,aC3C/C,IAAIK,EAAe,CAAC,mBAAoB,kBAAmB,oBAAqB,kBAAmB,qBAC/FC,EAASC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAaK,QAwCtCC,MApCf,WACE,OACE,yBAAKrC,UAAU,OAEb,yBAAKsC,GAAG,YAAYtC,UAAU,cAC5B,kBAAC,EAAD,MACA,kBAAC,mBAAD,KACE,kBAAC,WAAD,CAAUsC,GAAG,GAAGtC,UAAW+B,EAAaC,GAASO,EAAG,EAAE,GAAI,KACxD,yBAAKnC,MAAO,CAAEoC,OAAQ,SACtB,sCACA,yBAAKpC,MAAO,CAAEoC,OAAQ,YAO5B,6BAASF,GAAG,cAActC,UAAU,QAClC,uBAAGyC,KAAK,IAAG,kBAAC,OAAD,CAAMC,YAAY,SAASC,GAAG,aAAaC,KAAK,EAAMC,QAAQ,EAAMC,OAAQ,EAAGC,SAAU,KAAK,+BAAa,+BAAa,kCAErI,yBAAKT,GAAG,aAAatC,UAAU,uBAC7B,kBAAC,mBAAD,KACE,kBAAC,WAAD,CAAUA,UAAW+B,EAAaC,GAASO,EAAG,EAAE,GAAI,KAClD,iDACA,yBAAKnC,MAAO,CAAEoC,OAAQ,eCzBdQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b2c7dc3e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles} from '@material-ui/core/styles';\r\nimport SwipeableDrawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        width: '250',\r\n    },\r\n    fullList: {\r\n        width: 'auto',\r\n    },\r\n});\r\n\r\nexport default function SwipeableTemporaryDrawer() {\r\n    const classes = useStyles();\r\n    const [state, setState] = React.useState({\r\n        top: false,\r\n        left: false,\r\n        bottom: false,\r\n        right: false,\r\n    });\r\n\r\n    const toggleDrawer = (side, open) => event => {\r\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n\r\n        setState({ ...state, [side]: open });\r\n    };\r\n\r\n    \r\n    const sideList = side => (\r\n        <div\r\n            className={classes.list}\r\n            role=\"presentation\"\r\n            onClick={toggleDrawer(side, false)}\r\n\r\n            onKeyDown={toggleDrawer(side, false)}\r\n        >\r\n            <List>\r\n                {['Home', 'About Me', 'Contact'].map((text) => (\r\n                    <ListItem button key={text}>\r\n                        <ListItemText primary={text} />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </div>\r\n    );\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar\r\n                style={{ backgroundColor: 'transparent', boxShadow: 'none' }}\r\n                position=\"fixed\"\r\n\r\n            >\r\n                <Toolbar>\r\n                    <Typography noWrap className={classes.title}>\r\n\r\n                    </Typography>\r\n                    <div className=\"flexgrow\" style={{ flexGrow: 1 }}></div>\r\n                    <IconButton\r\n                        style={{ opacity: 1 }}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"end\"\r\n                        onClick={toggleDrawer('right', true)}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <SwipeableDrawer\r\n                anchor=\"right\"\r\n                open={state.right}\r\n                onClose={toggleDrawer('right', false)}\r\n                onOpen={toggleDrawer('right', true)}\r\n            >\r\n                {sideList('right')}\r\n            </SwipeableDrawer>\r\n        </div>\r\n    );\r\n}","import React/*, { Component }*/ from 'react';\nimport { Parallax, ParallaxProvider } from \"react-scroll-parallax\";\n//import VizSensor from \"react-visibility-sensor\";\n//import { Text } from 'react-native';\nimport './App.css';\nimport './css/animate.css';\nimport { Link, animateScroll as scroll } from \"react-scroll\";\nimport PersistentDrawerRight from './components/header';\nvar inAnimations = [\"flipInX animated\", \"bounce animated\", \"bounceIn animated\", \"fadeIn animated\", \"rotateIn animated\"];\nvar Random = Math.floor(Math.random() * inAnimations.length);\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {\n      <div id=\"parallax1\" className=\"App-header\">\n        <PersistentDrawerRight></PersistentDrawerRight>\n        <ParallaxProvider>\n          <Parallax id=\"\" className={inAnimations[Random]} y={[-50, 50]}>\n            <div style={{ height: '0px' }} />\n            <h1>Hello!</h1>\n            <div style={{ height: '0px' }} />\n\n          </Parallax>\n        </ParallaxProvider>\n\n\n      </div>}\n      <section id=\"scrolldown1\" className=\"demo\">\n        <a href=\"\"><Link activeClass=\"active\" to=\"parallaxii\" spy={true} smooth={true} offset={0} duration={500}><span></span><span></span><span></span></Link></a>\n      </section>\n      <div id=\"parallaxii\" className=\"App-header parallax\">\n        <ParallaxProvider>\n          <Parallax className={inAnimations[Random]} y={[-50, 50]} >\n            <h1>My name is Arnav!</h1>\n            <div style={{ height: '50px' }} />\n          </Parallax>\n        </ParallaxProvider>\n\n      </div>\n    </div >\n\n  );\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/animate.css'\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}